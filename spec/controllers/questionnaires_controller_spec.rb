require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe QuestionnairesController do
  render_views

  # This should return the minimal set of attributes required to create a valid
  # Questionnaire. As you add validations to Questionnaire, be sure to
  # update the return value of this method accordingly.
  def step0_attributes
    { :q0 => 2, :q1 => 14, :q2 => 25, :q3 => 23, :q4 => 55, :q5 => 12, :q6 => 21, :q7 => 98, :q8 => 21, :q9 => 10 }
  end
  
  def step1_attributes
    { :q10 => 2, :q11 => 14, :q12 => 25, :q13 => 23, :q14 => 55, :q15 => 12, :q16 => 21, :q17 => 98, :q18 => 21, :q19 => 10 }
  end
  
  def step2_attributes
    { :q20 => 2, :q21 => 14, :q22 => 25, :q23 => 23, :q24 => 55, :q25 => 12, :q26 => 21, :q27 => 98, :q28 => 21, :q29 => 10 }
  end
  
  def step3_attributes
    { :q30 => 2, :q31 => 14, :q32 => 25, :q33 => 23, :q34 => 55, :q35 => 12, :q36 => 21, :q37 => 98, :q38 => 21, :q39 => 10 }
  end
  
  def step4_attributes
    { :q40 => 2, :q41 => 14, :q42 => 25, :q43 => 23, :q44 => 55, :q45 => 12, :q46 => 21, :q47 => 98, :q48 => 21, :q49 => 10 }
  end
  
  def step5_attributes
    { :q50 => 2, :q51 => 14, :q52 => 25, :q53 => 23, :q54 => 55, :q55 => 12, :q56 => 21, :q57 => 98, :q58 => 21, :q59 => 10 }
  end
  
  def step6_attributes
    { :q60 => 2, :q61 => 14, :q62 => 25, :q63 => 23, :q64 => 55, :q65 => 12, :q66 => 21, :q67 => 98, :q68 => 21, :q69 => 10 }
  end
  
  def step7_attributes
    { :q70 => 2, :q71 => 14, :q72 => 25, :q73 => 23, :q74 => 55, :q75 => 12, :q76 => 21, :q77 => 98, :q78 => 21, :q79 => 10 }
  end
  
  def step8_attributes
    { :q80 => 2, :q81 => 14, :q82 => 25, :q83 => 23, :q84 => 55, :q85 => 12, :q86 => 21, :q87 => 98, :q88 => 21, :q89 => 10 }
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # QuestionnairesController. Be sure to keep this updated too.
  def valid_session
    { :session_id => "woot" }
  end
  
  def auth_admin
    @request.env["HTTP_AUTHORIZATION"] = "Basic " + Base64::encode64("#{ENV["ADMIN_USER"]}:#{ENV["ADMIN_PASS"]}")
  end
  
  before(:each) do
    @participant = FactoryGirl.create(:participant, :session_id => "woot")
    @demographic = FactoryGirl.create(:demographic, :participant_id => @participant.id)
    @graphic     = FactoryGirl.create(:graphic, :participant_id => @participant.id)
    @search      = FactoryGirl.create(:search, :participant_id => @participant.id)
  end

  describe "GET index" do
    before(:each) do
      auth_admin
    end
    it "assigns all questionnaires as @questionnaires" do
      questionnaire = FactoryGirl.create(:questionnaire, :participant_id => @participant.id)
      get :index, {}, valid_session
      assigns(:questionnaires).should eq([questionnaire])
    end
  end

  describe "GET show" do
    before(:each) do
      auth_admin
    end
    it "assigns the requested questionnaire as @questionnaire" do
      questionnaire = FactoryGirl.create(:questionnaire, :participant_id => @participant.id)
      get :show, {:id => questionnaire.to_param}, valid_session
      assigns(:questionnaire).should eq(questionnaire)
    end
  end

  describe "GET new" do
    it "assigns a new questionnaire as @questionnaire" do
      get :new, {}, valid_session
      assigns(:questionnaire).should be_a_new(Questionnaire)
    end

    it "should redirect to the new_search page" do
      @search.destroy
      get :new, {}, valid_session
      response.should redirect_to(new_search_path)
    end
  end

  # describe "GET edit" do
  #   it "assigns the requested questionnaire as @questionnaire" do
  #     questionnaire = Questionnaire.create! valid_attributes
  #     get :edit, {:id => questionnaire.to_param}, valid_session
  #     assigns(:questionnaire).should eq(questionnaire)
  #   end
  # end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Questionnaire" do
        expect {
          post :create, { :questionnaire => step0_attributes }, valid_session
        }.to change(Questionnaire, :count).by(1)
      end

      it "assigns a newly created questionnaire as @questionnaire" do
        post :create, {:questionnaire => step0_attributes}, valid_session
        assigns(:questionnaire).should be_a(Questionnaire)
        assigns(:questionnaire).should be_persisted
      end

      it "redirects to the created questionnaire" do
        post :create, {:questionnaire => step0_attributes}, valid_session
        response.should redirect_to(new_questionnaire_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved questionnaire as @questionnaire" do
        # Trigger the behavior that occurs when invalid params are submitted
        Questionnaire.any_instance.stub(:save).and_return(false)
        post :create, {:questionnaire => {}}, valid_session
        assigns(:questionnaire).should be_a_new(Questionnaire)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Questionnaire.any_instance.stub(:save).and_return(false)
        post :create, {:questionnaire => {}}, valid_session
        response.should render_template("questionnaires/steps/step0")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested questionnaire" do
        questionnaire = FactoryGirl.create(:questionnaire, :participant_id => @participant.id)
        # Assuming there are no other questionnaires in the database, this
        # specifies that the Questionnaire created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Questionnaire.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => questionnaire.to_param, :questionnaire => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested questionnaire as @questionnaire" do
        questionnaire = FactoryGirl.create(:questionnaire, :participant_id => @participant.id)
        put :update, {:id => questionnaire.to_param, :questionnaire => step1_attributes}, valid_session
        assigns(:questionnaire).should eq(questionnaire)
      end

      it "redirects to the questionnaire" do
        questionnaire = FactoryGirl.create(:questionnaire, :participant_id => @participant.id)
        put :update, {:id => questionnaire.to_param, :questionnaire => step1_attributes}, valid_session
        response.should redirect_to(new_questionnaire_path)
      end
    end

    describe "with invalid params" do
      it "assigns the questionnaire as @questionnaire" do
        questionnaire = FactoryGirl.create(:questionnaire, :participant_id => @participant.id)
        # Trigger the behavior that occurs when invalid params are submitted
        Questionnaire.any_instance.stub(:save).and_return(false)
        put :update, {:id => questionnaire.to_param, :questionnaire => {}}, valid_session
        assigns(:questionnaire).should eq(questionnaire)
      end

      it "re-renders the 'edit' template" do
        questionnaire = FactoryGirl.create(:questionnaire, :participant_id => @participant.id, :step => 2)
        # Trigger the behavior that occurs when invalid params are submitted
        Questionnaire.any_instance.stub(:save).and_return(false)
        put :update, {:id => questionnaire.to_param, :questionnaire => {}}, valid_session
        response.should render_template("questionnaires/steps/step2")
      end
    end
  end

  describe "DELETE destroy" do
    before(:each) do
      auth_admin
    end
    
    it "destroys the requested questionnaire" do
      questionnaire = FactoryGirl.create(:questionnaire, :participant_id => @participant.id)
      expect {
        delete :destroy, {:id => questionnaire.to_param}, valid_session
      }.to change(Questionnaire, :count).by(-1)
    end

    it "redirects to the questionnaires list" do
      questionnaire = FactoryGirl.create(:questionnaire, :participant_id => @participant.id)
      delete :destroy, {:id => questionnaire.to_param}, valid_session
      response.should redirect_to(questionnaires_url)
    end
  end

end
